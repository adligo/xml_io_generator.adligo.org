<?xml version="1.0" encoding="us-ascii"?>
<templates>
<template name="converter">
package <param name="package"><value/></param>;
<param name="extraImport">import <value/>;</param>

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import org.adligo.i.util.client.I_Iterator;
import org.adligo.models.params.client.I_XMLBuilder;
import org.adligo.models.params.client.Parser;
import org.adligo.models.params.client.TagAttribute;
import org.adligo.xml_io.client.I_AttributeSetter;
import org.adligo.xml_io.client.I_Converter;
import org.adligo.xml_io.client.I_FieldSetter;
import org.adligo.xml_io.client.Xml_IOWriterContext;
import org.adligo.xml_io.client.Xml_IOReaderContext;
import org.adligo.xml_io.client.ObjectFromXml;
import org.adligo.models.params.client.TagInfo;
import org.adligo.xml_io.client.Xml_IOConstants;

public class <param name="className"><value/></param> implements I_Converter&lt;<param name="genericClass"><value/></param>&gt; {
	public static final String TAG_NAME = "<param name="tagName"><value/></param>";
	<param name="attribute">
	public static final String <value/> = "<param name="attributeName"><value/></param>";
	</param>
	<param name="child">
	public static final String <value/> = "<param name="childName"><value/></param>";
	</param>
	private static final Map&lt;String, I_AttributeSetter&lt;<param name="genericClass"><value/></param>&gt;&gt; SETTERS = getSetters();
	private static final Map&lt;String, I_FieldSetter&lt;<param name="genericClass"><value/></param>&gt;&gt; FIELD_SETTERS = getFieldSetters();
	
	public static Map&lt;String, I_AttributeSetter&lt;<param name="genericClass"><value/></param>&gt;&gt; getSetters() {
		Map&lt;String, I_AttributeSetter&lt;<param name="genericClass"><value/></param>&gt;&gt; toRet = 
			new HashMap&lt;String, I_AttributeSetter&lt;<param name="genericClass"><value/></param>&gt;&gt;();
		
		<param name="attribute">
		toRet.put(<value/>, new I_AttributeSetter&lt;<param name="genericClass"><value/></param>&gt;() {
			public void set(<param name="genericClass"><value/></param> obj, String value, Xml_IOReaderContext context) {
				Object toSet = context.readAttribute(<param name="fieldClass"><value/></param>, value);
				try {
					obj.<param name="setter"><value/></param>((<param name="fieldClassCastable"><value/></param>) toSet);
				} catch (Exception x) {
					throw new IllegalArgumentException(x);
				}
			}
		});
		</param>
		return Collections.unmodifiableMap(toRet);
	}
	
	
	public static Map&lt;String, I_FieldSetter&lt;<param name="genericClass"><value/></param>&gt;&gt; getFieldSetters() {
		Map&lt;String, I_FieldSetter&lt;<param name="genericClass"><value/></param>&gt;&gt; toRet = 
			new HashMap&lt;String, I_FieldSetter&lt;<param name="genericClass"><value/></param>&gt;&gt;();

		<param name="child">
		toRet.put(<value/>, new I_FieldSetter&lt;<param name="genericClass"><value/></param>&gt;() {
			public void set(<param name="genericClass"><value/></param> obj, Object value) {
				try {
					obj.<param name="setter"><value/></param>((<param name="childClassCastable"><value/></param>) value);
				} catch (Exception x) {
					throw new IllegalArgumentException(x);
				}
			}
		});
		</param>
		
		return Collections.unmodifiableMap(toRet);
	}
	
	@Override
	public ObjectFromXml&lt;<param name="genericClass"><value/></param>&gt; fromXml(String xml, TagInfo info, Xml_IOReaderContext context) {
		//the <param name="genericClass"><value/></param> class is mutable so just call setters
		<param name="genericClass"><value/></param> toRet = new <param name="genericClass"><value/></param>();
		I_Iterator it = Parser.getAttributes(info, xml);
		while (it.hasNext()) {
			TagAttribute attrib = (TagAttribute) it.next();
			String name = attrib.getName();
			String value = attrib.getValue();
			
			I_AttributeSetter&lt;<param name="genericClass"><value/></param>&gt; setter = SETTERS.get(name);
			if (setter != null) {
				setter.set(toRet, value, context);
			}
		}
		it = info.getChildren();
		while (it.hasNext()) {
			TagInfo child = (TagInfo) it.next();
			String subTag = Parser.substring(xml, child);
			ObjectFromXml&lt;?&gt; obj =  context.readXml(subTag);
			String name = obj.getName();
			I_FieldSetter&lt;<param name="genericClass"><value/></param>&gt; setter = FIELD_SETTERS.get(name);
			Object value = obj.getValue();
			setter.set(toRet, value);
		}
		
		return new ObjectFromXml&lt;<param name="genericClass"><value/></param>&gt;(toRet);
	}

	@Override
	public void toXml(<param name="genericClass"><value/></param> p, Xml_IOWriterContext context) {
		I_XMLBuilder builder = context.getBuilder();
		context.appendTagHeaderStart(ConverterSetup.NAMESPACE, TAG_NAME);
		context.appendSchemaInfoToFirstTag();
		
		String name = context.getNextTagNameAttribute();
		if (name != null) {
			context.writeXmlAttribute(Xml_IOConstants.N_NAME_ATTRIBUTE, name);
		}
		<param name="attribute">
			context.writeXmlAttribute(<value/>, p.<param name="getter"><value/></param>());
		</param>
		<param name="hasChildren">
		builder.appendTagHeaderEnd(true);
		</param>
		<param name="doesNotHaveChildren">
		builder.appendTagHeaderEndNoChildren();
		</param>
		<param name="child">
			context.setNextTagNameAttribute(<value/>);
			context.writeXml(p.<param name="getter"><value/></param>());
		</param>
		<param name="hasChildren">
			context.appendEndTag(ConverterSetup.NAMESPACE, TAG_NAME);
		</param>
	}
}
</template>
</templates>